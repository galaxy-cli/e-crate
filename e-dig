#!/bin/bash
#   ___        __| (_) __ _
#  / _ \_____ / _` | |/ _` |
# |  __/_____| (_| | | (_| |
#  \___|      \__,_|_|\__, |
#                     |___/
# Author: galaxy-cli
# Project: https://github.com/galaxy-cli/e-dig
# e-dig is a simple Bash utility for downloading audio samples

# Function: print usage info
print_usage() {
    cat <<EOF
USAGE
  e-dig -u                  Update or install yt-dlp to latest version
  e-dig -d LINK1 [LINK2...] Download YouTube audio as MP3 from one or more URLs
OPTIONS
  -u    Update yt-dlp to the latest version (install if missing)
  -d    Download audio from one or more YouTube URLs
  -h    Show this help message
EOF
}


# Function: Install yt-dlp if missing
install_yt_dlp() {
    echo "yt-dlp not found. Installing..."
    sudo apt update
    # Try install package first
    if sudo apt install -y yt-dlp; then
        echo "yt-dlp installed via apt."
        return 0
    else
        # If apt install failed, fallback to downloading latest binary
        echo "apt install failed or yt-dlp package not found. Downloading latest binary..."
        sudo wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /usr/bin/yt-dlp
        sudo chmod a+rx /usr/bin/yt-dlp
        if command -v yt-dlp >/dev/null 2>&1; then
            echo "yt-dlp installed successfully."
            return 0
        else
            echo "Failed to install yt-dlp."
            return 1
        fi
    fi
}


# Function: Update yt-dlp (assumes installed)
update_yt_dlp() {
    echo "Updating yt-dlp to latest version..."
    # Use yt-dlp's built-in update command if available
    if yt-dlp -U; then
        echo "yt-dlp updated successfully."
        return 0
    else
        echo "yt-dlp update command failed. Attempting manual download..."
        sudo wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /usr/bin/yt-dlp
        sudo chmod a+rx /usr/bin/yt-dlp
        # Verify installation
        if command -v yt-dlp >/dev/null 2>&1; then
            echo "yt-dlp updated via manual download."
            return 0
        else
            echo "Failed to update yt-dlp."
            return 1
        fi
    fi
}


# Parse options and arguments

if [[ $# -eq 0 ]]; then
    print_usage
    exit 1
fi

DOWNLOAD_URLS=()
UPDATE_FLAG=false
SHOW_HELP=false

# We'll manually parse because getopts only takes single-argument options

while [[ $# -gt 0 ]]; do
    case "$1" in
        -u)
            UPDATE_FLAG=true
            shift
            ;;
        -d)
            shift
            # Collect all remaining args as URLs until an option or no more args
            while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
                DOWNLOAD_URLS+=("$1")
                shift
            done
            ;;
        -h)
            SHOW_HELP=true
            shift
            ;;
        *)
            echo "Invalid option or argument: $1"
            print_usage
            exit 1
            ;;
    esac
done

if $SHOW_HELP; then
    print_usage
    exit 0
fi

if $UPDATE_FLAG; then
    if ! command -v yt-dlp >/dev/null 2>&1; then
        install_yt_dlp || exit 1
    else
        update_yt_dlp || exit 1
    fi
    exit 0
fi

if [[ ${#DOWNLOAD_URLS[@]} -eq 0 ]]; then
    echo "Error: No URLs provided for download."
    print_usage
    exit 1
fi

if ! command -v yt-dlp >/dev/null 2>&1; then
    echo "yt-dlp is not installed. Attempting to install first."
    install_yt_dlp || exit 1
fi

for url in "${DOWNLOAD_URLS[@]}"; do
    echo "Downloading audio from $url as MP3..."
    yt-dlp -x --audio-format mp3 "$url"
    if [[ $? -ne 0 ]]; then
        echo "Failed to download from $url"
    fi
done